Know about the linux you are using 

**cat /etc/os-release**

**Linux Commands**

If files are in the pwd then no need to give location otherwise mention file with full location
Starting with "~/"

"~" This is home
-v : Verbose mode
-r : Recursive mode (Does action till the last location whether it is cp, mv or rm; used to operate with folders)

. :  is for current location[pwd]

cmd --help or info cmd or man cmd

### #ls

ls -lhart (list form, human readable, all files(including hidden files), reverse, sorted by time)
ls filename(contents inside file)
ls -lha <location of file>

ls -1 : only brings the name of the files

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

- **#Some Useful Commands**
    
    mkdir: Make directory
    touch: Make empty file
    nano: make file
    vim = nano
    rmdir: remove empty directory only
    rm: Remove files as well as directory
    rm -rf : remove empty/filled directory forcefully (-r for recursive)
    

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

### #cd

cd (to home)
cd ..(one directory back)
cd Documents/'Armour Infosec' or cd Documents/Armour\ Infosec (anything location starting from home can be accessed without / in beginning)

(harsh㉿kali)-[/var/log/redis]
cd ../../spool
(harsh㉿kali)-[/var/spool]

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

### #cp

cp -v filename(with ‘from’ location) filename(with 'to' location)
cp -v file1 file2 file3 file4 filen location1                                : All files will be capied in location1 - the last is the destination always
cp -r /root/folder1/  /var/folder2/
e.g cp -r folder1/ Downloads/
cp -vr  ~/Videos/folder1 .                                                              :  . is for current location[pwd]
cp -vr  ~/Videos/folder1 ../                                                           : one folder outside
cp -r /Downloads/folder1/file[1-5] /Documents                : wild cards
cp -r folder1/* Downloads/                                                         : copy all the contents of the folder but not the folder
cp /var/log /home/*/                                                                      : copy log in every user

(harsh㉿kali)-[~/Music]
└─$ cp -vr  ~/Videos/folder1 ~/Downloads/
'/home/harsh/Videos/folder1/f1' -> '/home/harsh/Downloads/folder1/f1'
'/home/harsh/Videos/folder1/f2' -> '/home/harsh/Downloads/folder1/f2'
'/home/harsh/Videos/folder1/f3' -> '/home/harsh/Downloads/folder1/f3'
'/home/harsh/Videos/folder1/f4' -> '/home/harsh/Downloads/folder1/f4'

See this difference carefully

(root㉿kali)-[~]
└─# cp -rv /home/harsh/Downloads/folder1 ~/home/harsh/Documents
cp: cannot create directory '/root/home/harsh/Documents': No such file or directory

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

### #mv

mv name rename
mv is used for cut

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

### **#ln - Used for creating link**

Two types of links:

1. Soft link: ln -s : Updates the original file in real time
2. Hard link: Creates a mirror of the actual file or folder, changes in the mirror will update the original file but deleting original file would not delete link

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

### #Some essential commands:

**less :** used instead of cat for content only full to one page
**tty:** type of terminal; if we are logged in in actual computer then we get tty  if we ssh terminal then we get pts(this tells us that we are logged in using third tool like ssh)
**id**
**who** -a
**w: t**ell the number of shells open
**hostname:** name of pc
**hostname** -i : ip address of 1st interface
**hostname** -I : ips of all interfaces
**uname** -a : Everything about OS
**#lscpu:** what is the bit size of cpu
**lsusb :** Connection througn usb
**lspci** :  Connection through wireless
**lsblk :** Information of hard drive
**free** -h : About RAM
ip ad = ifconfig
route -n : routing table
cat /etc/resolve.conf : Information of DNS

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

### #Pipes and Redirects

⇒ To run multiple commands at once: **“ ; ” or “ &&”**   b/w commands

⇒ When we use piple (|) between commands, the output of first command is passed as a input for the later command and the output is shown for the last command, for example

→ ifconfig | id | date | ls | pwd

Output of ifconfig will be passed to id then the output generated from that combination will be passed as the input for date and so on…

⇒ Code for standard input : 0
⇒ Code for standard output : 1

⇒ Code for standard error : 2

“>” redirects output to a file : overwrites the file

e.g. ls -la > filename.txt

echo “Name : Harsh” > user.txt : This will make a file and add Name : Harsh 

but if we do

 echo “email : harshrahul@gmail.com” > user.txt : This will delete the previous content then add new instead of editing it.

“>>” double redirection: Add content to the existing file without deleting the previous content : appends to the file

e.g. 

echo “Name : Harsh” > user.txt

 echo “email : harshrahul@gmail.com” >> user.txt

cat user.txt

Output: Name : Harsh

            email : harshrahul@gmail.com

“<” redirects the content of a file to a command

Syntax : cmd < filename.txt

e.g. sort < numbers.txt

wc < /etc/passwd

“2>"   This is used to redirect the standard error

e.g. cat /etc/os-release /etc/shadow /etc/sudoers 2> error.txt

Above command will redirect all the errors in [error.t](http://error.tt)xt and show us the output only

cat /etc/os-release /etc/shadow /etc/sudoers  > output.txt 2> error.txt

Above command will redirect output to output.txt and error to error.txt

“&>” This redirects both output and errors in one file

/dev/null : Location to through garbage

Some more examples 

ls -1 “*.txt” > output.txt

ls -1 “*.cfg” >> output.txt

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

### #Compression and Archive Tools

bzip2 : Replace file with compressed file (doesn’t work with folder)

bunzip : Unzip the bzip file

gzip : Same as bzip2 but reduces more size (doesn’t work with folder)

gunzip : unzip gzip 

gzip -r : Compresses files inside folder

zip  : Makes new file without overwriting the actual file

zip filename.zip filename filename2 …( filename.zip is the file which is going to get created and filename is the file out of which the zipped file is going to get created)

e.g. zip output.txt.zip output.txt

uzip : Unzip the zip

e.g.2 zip File.zip file1 file2 file3 file4 (All files will get compressed in one file only

TAR : Creates backup; Archive files; keeps the same form; Can be used with folders

⇒ tar -cvs (create, verbose, forcefully) filename.tar(which is getting created) filename(which we are backing up)

⇒ tar -cvs  filename.tar file1, file2, filex…

Untar:

⇒ tar -xvf(extract, verbose, forcefully) filename.tar

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

### #Text Editor

- cat
    
    -n : number of lines
    
    cat : read content of the file
    
    cat > file.txt
    
    cat file.txt
    
    cat <<EOF>> text.txt (Editor will exit if the word between <<>> comes in written without the need to use ctrl + c)
    
    cat -n (number before each line)
    
    cat -e ($ at the end of each line
    
- nano
    
    Same as notepad
    
    There are so many options in nano use ctrl + G to see them all
    
    It can merge files, it can open multiple files in one, spell check and many more
    
- vim
    
    [5 Modes:](https://www.notion.so/5-Modes-acaf20494f7142079e8c34dc275f5182?pvs=21)
    
    1. Command Mode (default)
    2. Insert Mode (i/insert)
    3. Visual Mode (v)
    4. Replace Mode (R)
    5. Command-Line (Last Line Mode) ( : )
    
    Exit from any mode to go to command mode use ESC
    
    For writing in vim: Insert Mode → Write Change → Command Mode → :w or :wq(save and exit)
    
    vim command mode shortcuts:
    
    Quit without saving : :q!
    
    Save and exit when file is in use :  :wq!
    
    Delete line: dd                                         delete n lines : ndd
    
    delete from the cursor : D                      
    
    delete single character : x                       delete n characters : nx
    
    delete word : w                                       delete n words : nw
    
    Replace letter : r
    
    Replace word : cw                                  Replace n words : ncw
    
    Replace Line : C                                    Replace n lines : nC
    
    Empty line : o                                         n empty lines : no
    
    empty line Above the cursor : O
    
    Join the lines : J                                    Join n lines : nJ
    
    Copy line: yy
    
    Paste : pp
    
    Search or Find command : :s/word (word = word to be found)
    
    Replace : :%s/word/replace word
    
    That n thing goes for all the shortcuts: n is the multiple of times it has to be done
    
    Action after cursor is done by small letter and before cursor is done by capital letter
    
    Game : vim adventure
    

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

### #String Processing

wc

wc: Word count

wc -w: Only words

wc -c: Only characters

wc -l : linecount

head

Prints top lines of file

by default 10 lines are shown

-n “no. of lines”

-c “no. of characters”

head /etc/passwd /etc/shadow /etc/shadow

tail 

Prints bottom of the file

-n “no. of lines”

-c “no. of characters”

sed 

Print From line number this to that

p - print

(this also update the actual file, so don’t mess with original files)

sed -n ‘5p’ /file (prints line 5)

sed -n ‘1,2p’ passwd (prints line 1 to 2)

sed -n ‘5,8p’ passwd (prints line 5 to 8)

sed -n ‘^$p’ /file (prints empty line)

sed -n ‘$p’ /file (prints last line

sed -n ‘5,8!p’ passwd (does not print line 5 to 8)

sed ‘s/sbin/SBINp’ /file (s for find and replace)

sed ‘G;Gp’ /file (prints empty line after every line)

sort

sort filename (Does dictionary sort)

sort -n(numeric sort)

sort -h(human readable)

sort -r(reverse)

sort -u(unique)

sort -R(randomize)

uniq

Generates unique value

Works only in sequence order

Can be used with sort with pipe

uniq -c (Counts each occurrence)

watch

Runs the given command until stopped

-n “define interval”

- grep
    
    \ simply ignores the front special characters and take them as it is; used with space or special characters like & ^ # $ etc
    
    grep word filename
    
    grep “wo rd” filename or grep wo\ rd filename
    
    grep word file1 file2 file3
    
    grep -i (in-case sensitive)
    
    cat filename | grep word (can be used with any command)
    
    grep -r (for recursive search)
    
    grep -in word (for line number)
    
    grep -E ‘(Starting|Started)’ filename : Finds places containing both starting or started
    
    grep -E ‘(Starting|Started)’ /var/log/messages | grep user | grep root
    
    grep -v word (-v shows everything except the lines containing the word)
    
    grep ^word : If we want the word to be in starting of the line
    
    grep word$ : If we want the word to be in the end
    
    Input:
    
    cat /etc/ssh/sshd_config | grep -v "^\#" 
    
    Output:
    
    Lines which don’t have # in the starting
    
    ⇒ Another way of writing the above command :
    
    grep -v "^\#" /etc/ssh/sshd_config
    
    Input: 
    
    grep  -v ^$  : Removes all the empty lines
    
    Character Classe
    
    [ : upper : ]  - Uppercase character
    
    [ : lower : ]  - Lowercase character
    
    [ : alpha : ]  - Alphabetic
    
    [ : digit : ]  - Number
    
    [ : alnum : ]  - Alphanumeric
    
    [ : space : ]  - Whitespace character (space, tab, newline)
    

ps -aux

Shows running processes

cut

n = field number(the place at which the word or pattern is occuring)

d for delimiter, the thing separating each field

cut -fn -d “ ” filename

cut -f2 -d “ ,” filename

cut -f5,6 -d “:” filename

grep and cut together

ifconfig | grep “inet “ | cut -d ‘ ‘ -f10

ifconfig -a | grep mtu | cut -f1 -d ':'
eth0
lo
wlan0

awk

This can filter both vertically and horizontally 

basic syntax:

awk ‘{print s0}’ /etc/passwd

this will print everything

awk ‘{print s0}’ /etc/passwd

this will print first field using space as a default delimeter

Printing both ver and hor:

awk -F “:” ‘root/{print $1}’ /etc/passwd

this will print the first word in the line where root is present using : as a delimeter

awk -F “:” ‘/bash/{print $1, $3}’ /etc/passwd

this will print first and third word of the lines where bash is present.

Print IPv4 Addresses:

ifconfig | awk ’/inet /{print $2}’

Decorating headers and tails using awk

ifconfig | awk ‘ BEGIN{ Print “=== IP Address===” } /inet /{print $2}

We can print anything in the head using BEGIN

echo " one two three four" | awk 'BEGIN{print "=========TITLE========="} {print $0} END {print "_______________________________"}'

Update the field value

awk -F “:” ‘/bash/{ $1 = “Updated; print $1}’ /etc/passwd

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

### **#User Management**

User Accounts Facts

⇒ Every user is assigned a UId

⇒ User’s information such as user name, UID, home directory and shell is stored in /etc/passwd

⇒ There are three types of user in Linux: root, regular and service

root : UID - 0

regular : UID - 1000 to 60000 in linux

service : UID - 100 to 999 : Service accounts are created by installation packages when they are installed. These accounts are used by services to run processes and executed functions. 

Home directory of ;

Root            -              /root

Regular       -              /home/user1

In server, do;

cat /etc/login.defs    or grep UID /etc/login.defs

Group Facts in RHEL

⇒ User’s are assigned to a group

⇒ Each group is assigned a unique group ID GID

⇒ Information of group at /etc/group

⇒ Each user given their own private group. Can be added to other groups for additional access.

sudo cat /etc/shadow

[sudo] password for hv-rahul:
username         :            x    :         1000       :           1000          :      Something        :       home/armour      :                  bin/bash

   |                                  |                      |                       |                                  |                                   |                                     |

user                           Indicate          UID                   GID                   Comment                              Home                          /bin/bash

name                        password pro                                                                                                directory                          shell

cat /etc/shadow

1. Username
2. Encrypted Password
3. Last Password Change
4. Minimum password age
5. Maximum password age
6. Warning Period 
7. Inactivity period
8. Expiration date
9. Unused

cat /etc/group

1. Group name
2. Password indicater
3. Group ID
4. List of the users

cat /etc/gshadow

1. Group name
2. Encrypted Password
3. Group admin name
4. List of group members

cat /etc/shells

My shell : echo $shell

For colorful terminal

wget grc : https://github.com/garabik/grc/archive/refs/tags/v1.13.zip

unzip

run [install.sh](http://install.sh) in grc file

then run grc ping 8.8.8.8

grc does not support all commands

**==============================================================================**

### **#Add User**

CentOS supports both useradd and adduser

Debian supports adduser precisely

Files which gets updated passwd, shadow, group, gshadow

Debian doesn’t create home directory of a user by default so we have to user 

useradd —create-home username

useradd —no-create-home username : No home directory

vim /etc/default/useradd : Change the home directory location

Add Comment with user

useradd -c “Comment” username

Add user without group

useradd -N username

Give user a shell

useradd -s /shell/name username

Change user’s or Add user’s id 

useradd -u 1018(any) username

useradd -o -u 1024(any) username : Non-unique user id

Same userid will open the same account even if the usernames are different

Make a root user

useradd -u 0 Admin

Set Password

useradd -p “Password’s hash” username

For creating the hash of password

openssl passwd -6 “Raw Password”(-6 option for debian only)

Or 

mkpasswd tool

We can provide  all the options above at once

### #Usermod

Usermod works same as Adduser or Useradd, its just that Adduser/Useradd makes a new user and Usermod is used to modify the present user

Lock User

usermod -L username

### #Userdel

Delete with home directory:

userdel -r username

deluser: Deletes user from a group only

### #GroupAdd

groupadd -h

groupadd -r : create system group

### #GroupMod

groupmod -h

#groups : Check the groups of a user

### #gpasswd

set password by default

gpasswd -a username groupname (Add user to a group)

gpasswd -M users groupname (Add multiple users in a group)

gpasswd -d user group (delete user from a group)

gpasswd -A (Make user group Admin)

A user can have multiple secondary groups

**#Change primary group of a user**

usermod -g groupid username

**#Add secondary groups to the user**

usermod -G

### #chown

Change owner:

chown ownername filename

Change owner and group:

chown owner:group filename

// We can give multiple filename at a time

Wildcards can also be used in chown

//Change folder permission

chown owner folder/ 

chown -R owner folder/ 

### #chgrp

Changes only group

### #chmod

Change the owner, group and other’s permissions

1st block indicate the permissions of owner

2nd tell the permissions of respective group
3rd show the permissions of other users to that file

⇒ Give owner the permission to write, read, execute

chmod u+r filename

chmod u+w filename

chmod u+x filename

⇒ Give others to write, read, execute

chmod o+r filename

chmod o+w filename

chmod o+x filename

⇒ Give group to write, read, execute

chmod g+r filename

chmod g+w filename

chmod g+x filename

⇒ Remove owner, other or group to write, read, execute

chmod u-r filename

chmod o-w filename

chmod g-x filename

⇒ Give read, write, execute permission to all

chmod a+rwx filename

chmod 777 filename

⇒ Similarly remove

chmod a-rwx filename

⇒ Give other+ group permission all

chmod og+rwx filename

You got the point right??

Now play with it no!…not everything will be written here.

⇒ Give different permissions to everyone

chmod u+rwx o+rw g+r filename

Wild cards also applicable here
